# -*- coding: utf-8 -*-
"""lr_ols.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LfKTpBgtDCwOKKxCol9_YxiHedOEtrzL
"""

import numpy as np

def linear_regression(X, y):
    # Add a column of ones to the feature matrix for the intercept term
    X = np.column_stack((np.ones_like(X), X))

    # Calculate the coefficients using the OLS formula: Î² = (X^T * X)^(-1) * X^T * y
    beta = np.linalg.inv(X.T @ X) @ X.T @ y

    return beta

def get_residuals(X, y, beta):
    # Add a column of ones to the feature matrix for the intercept term
    X = np.column_stack((np.ones_like(X), X))

    # Calculate the predicted values using the obtained coefficients
    y_pred = X @ beta

    # Calculate the residuals (epsilon) as the difference between observed and predicted values
    residuals = y - y_pred

    return residuals
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([2, 4, 5, 4, 5])

# Performing linear regression
coefficients = linear_regression(X, y)

# Getting residuals
residuals = get_residuals(X, y, coefficients)

# Print the coefficients and residuals
print("Coefficients (beta):", coefficients)
print("Residuals (epsilon):", residuals)